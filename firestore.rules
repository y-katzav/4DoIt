rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    // פונקציה לבדיקת גישה ללוח
    function hasboardAccess(boardData) {
      return isSignedIn() && (
        boardData.ownerId == request.auth.uid ||
        (boardData.members is map && boardData.members[request.auth.uid] in ['viewer', 'editor', 'owner']) ||
        (boardData.sharedWith is map && boardData.sharedWith[request.auth.uid] in ['viewer', 'editor', 'owner']) ||
        exists(/databases/$(database)/documents/users/$(request.auth.uid)/boardMemberships/$(resource.id))
      );
    }

    // פונקציה לבדיקת הרשאת עריכה ללוח
    function canEditBoard(boardData) {
      return isSignedIn() && (
        boardData.ownerId == request.auth.uid ||
        (boardData.members is map && boardData.members[request.auth.uid] == 'editor') ||
        (boardData.sharedWith is map && boardData.sharedWith[request.auth.uid] == 'editor') ||
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)/boardMemberships/$(resource.id)) && 
         get(/databases/$(database)/documents/users/$(request.auth.uid)/boardMemberships/$(resource.id)).data.role in ['editor', 'owner'])
      );
    }

    match /boards/{boardId} {
      allow get, list: if hasboardAccess(resource.data);

      allow create: if isSignedIn()
        && request.resource.data.ownerId == request.auth.uid
        && (!('members' in request.resource.data) || request.resource.data.members is map)
        && (!('sharedWith' in request.resource.data) || request.resource.data.sharedWith is map);

      allow update, delete: if canEditBoard(resource.data);

      match /tasks/{taskId} {
        allow read: if hasboardAccess(get(/databases/$(database)/documents/boards/$(boardId)).data);
        
        allow create: if canEditBoard(get(/databases/$(database)/documents/boards/$(boardId)).data);
        
        allow update, delete: if canEditBoard(get(/databases/$(database)/documents/boards/$(boardId)).data);
      }

      match /categories/{categoryId} {
        allow read: if hasboardAccess(get(/databases/$(database)/documents/boards/$(boardId)).data);
        
        allow create: if canEditBoard(get(/databases/$(database)/documents/boards/$(boardId)).data);
        
        allow update, delete: if canEditBoard(get(/databases/$(database)/documents/boards/$(boardId)).data);
      }
    }

    match /boardInvitations/{invitationId} {
      allow create: if isSignedIn();
      allow read: if isSignedIn() && (
        resource.data.senderUid == request.auth.uid ||
        resource.data.recipientEmail == request.auth.token.email
      );
      allow update: if isSignedIn() && (
        resource.data.recipientEmail == request.auth.token.email
      );
      allow delete: if isSignedIn() && (
        resource.data.senderUid == request.auth.uid
      );
    }

    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      
      // קריאה מותרת רק למשתמש עצמו
      allow read: if isSignedIn() && request.auth.uid == userId;
      
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
      
      match /boardMemberships/{boardId} {
        allow read, write: if isSignedIn() && request.auth.uid == userId;
        // אפשר קריאה גם למשתמשים שהם חברים בלוח (viewer/editor)
        allow read: if isSignedIn() && exists(/databases/$(database)/documents/boards/$(boardId)) &&
          hasboardAccess(get(/databases/$(database)/documents/boards/$(boardId)).data);
      }
    }
  }
}